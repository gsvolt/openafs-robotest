{% raw -%}
---
#
# Create the OpenAFS test cell on set of client and server test instances.
#
# First, gather the addresses of the database servers for the CellServDB file to
# be distributed to the clients and servers. The results are saved in the
# csdb.yaml file on the controller.  Then, install and setup the file and
# database servers and create the root volumes. Then, install the clients.
# Finally, create the top-level volumes and the test users.
#

- name: Create CellServDB
  hosts: afs_databases
  collections:
    - openafs_contrib.openafs
  tasks:
    - include_role:
        name: openafs_common
        tasks_from: generate_csdb
      when: afs_csdb is undefined

- name: Install servers
  hosts: afs_databases:afs_fileservers
  collections:
    - openafs_contrib.openafs
  vars:
    # Create fake /vicep partitions for testing purposes.
    afs_pseudo_partitions: ['a', 'b', 'c']
  tasks:
    - import_role:
        name: openafs_server

- name: Install clients
  hosts: afs_clients
  collections:
    - openafs_contrib.openafs
  tasks:
    - import_role:
        name: openafs_krbclient

    - import_role:
        name: openafs_client

    - name: Upload keytabs
      copy:
        src: "{{ afs_cell_files }}/{{ item }}"
        dest: "{{ item }}"
        mode: "400"
      with_items:
        - "{{ afs_admin }}.keytab"
        - "{{ afs_user }}.keytab"

#
# Create the top-level cell volumes and some initial users.
#
- name: New cell
  hosts: afs_admin_client
  collections:
    - openafs_contrib.openafs
  tasks:
    - import_role:
        name: openafs_common

    - name: Create top-level volumes
      openafs_volume:
        state: present
        name: "{{ item.name }}"
        mount: "{{ item.mount }}"
        acl: "{{ item.acl }}"
        auth_user: "{{ afs_admin | replace('.', '/') }}"
        auth_keytab: "{{ afs_admin }}.keytab"
        replicas: 3
      with_items:
        - name: root.afs
          mount: /afs
          acl: "system:anyuser read"
        - name: root.cell
          mount: /afs/{{ afs_cell }}
          acl: "system:anyuser read"
        - name: test
          mount: /afs/{{ afs_cell }}/test
          acl:
            - "system:anyuser read"
            - "system:authuser write"

    - name: Create test user
      openafs_user:
        name: "{{ afs_user }}"
        id: "{{ afs_user_id | int }}"
        group: "{{ afs_testers_group | d('testers') }}"
        auth_user: "{{ afs_admin | replace('.', '/') }}"
        auth_keytab: "{{ afs_admin }}.keytab"
{%- endraw %}
