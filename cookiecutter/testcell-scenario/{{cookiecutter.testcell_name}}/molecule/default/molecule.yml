---
dependency:
  name: galaxy
  enabled: yes
  requirements-file: collections.yml

driver:
{%- if cookiecutter.driver == 'unmanaged' %}
  name: delegated
  options:
    # Note: You must configure ~/.ssh/config
    managed: False
    login_cmd_template: 'ssh {instance}'
    ansible_connection_options:
      ansible_connection: ssh
      ansible_ssh_common_args: ''
  prepare:
    bootstrap_python: no
    allow_reboot: no
    set_hostname: no
    rewrite_hosts_file: no
    selinux_mode: permissive
{%- elif cookiecutter.driver == 'vagrant/virtualbox' %}
  name: vagrant
  provider:
    name: virtualbox
  prepare:
    bootstrap_python: yes
    allow_reboot: yes
    set_hostname: no
    rewrite_hosts_file: yes
    selinux_mode: permissive
{%- elif cookiecutter.driver == 'vagrant/libvirt' %}
  name: vagrant
  provider:
    name: libvirt
  prepare:
    bootstrap_python: yes
    allow_reboot: yes
    set_hostname: no
    rewrite_hosts_file: yes
    selinux_mode: permissive
{%- elif cookiecutter.driver == 'vagrant/vmware_desktop' %}
  name: vagrant
  provider:
    name: vmware_desktop
  prepare:
    bootstrap_python: yes
    allow_reboot: yes
    set_hostname: no
    rewrite_hosts_file: yes
    selinux_mode: permissive
{%- elif cookiecutter.driver == 'proxmox' %}
  name: proxmox
  options:
    proxmox_secrets: "${PROXMOX_SECRETS}"
    node: "${PROXMOX_NODE}"
    ssh_user: "${PROXMOX_SSH_USER}"
    ssh_identity_file: "${PROXMOX_SSH_IDENTITY_FILE}"
    timeout: 300
  prepare:
    bootstrap_python: yes
    allow_reboot: yes
    set_hostname: yes
    rewrite_hosts_file: yes
    selinux_mode: permissive
{%- endif %}

platforms:
{%- if cookiecutter.cluster == 'one instance' %}
  - name: "{{ cookiecutter.instance_name }}"
  {%- if cookiecutter.driver.startswith('vagrant') %}
    box: "{{ cookiecutter.image }}"
  {%- elif cookiecutter.driver == 'proxmox' %}
    proxmox_template_name: "{{ cookiecutter.image }}"
  {%- endif %}
    groups:
      - afs_admin_client
      - afs_clients
      - afs_databases
      - afs_fileservers
      - afs_kdcs
      - afs_test
  {%- if cookiecutter.build_packages and cookiecutter.install_method in ('packages', 'bdist', 'sdist') %}
      - afs_builders
  {%- endif %}
{%- elif cookiecutter.cluster == 'one client instance, one server instance' %}
  - name: "{{ cookiecutter.instance_name }}-client"
  {%- if cookiecutter.driver.startswith('vagrant') %}
    box: "{{ cookiecutter.image }}"
  {%- elif cookiecutter.driver == 'proxmox' %}
    proxmox_template_name: "{{ cookiecutter.image }}"
  {%- endif %}
    groups:
      - afs_admin_client
      - afs_clients
      - afs_test
  {%- if cookiecutter.build_packages and cookiecutter.install_method in ('packages', 'bdist', 'sdist') %}
      - afs_builders
  {%- endif %}

  - name: "{{ cookiecutter.instance_name }}-server"
  {%- if cookiecutter.driver.startswith('vagrant') %}
    box: "{{ cookiecutter.image }}"
  {%- elif cookiecutter.driver == 'proxmox' %}
    proxmox_template_name: "{{ cookiecutter.image }}"
  {%- endif %}
    groups:
      - afs_databases
      - afs_fileservers
      - afs_kdcs

{%- elif cookiecutter.cluster == 'three client instances, three database instances, three fileserver instances' %}

{%- for i in range(3) %}
  - name: "{{ cookiecutter.instance_name }}-client{{ i }}"
  {%- if cookiecutter.driver.startswith('vagrant') %}
    box: "{{ cookiecutter.image }}"
  {%- elif cookiecutter.driver == 'proxmox' %}
    proxmox_template_name: "{{ cookiecutter.image }}"
  {%- endif %}
    groups:
      - afs_clients
    {%- if loop.first %}
      - afs_admin_client
      - afs_test
      {%- if cookiecutter.build_packages and cookiecutter.install_method in ('packages', 'bdist', 'sdist') %}
      - afs_builders
      {%- endif %}
    {%- endif %}
{% endfor %}

{%- for i in range(3) %}
  - name: "{{ cookiecutter.instance_name }}-db{{ i }}"
  {%- if cookiecutter.driver.startswith('vagrant') %}
    box: "{{ cookiecutter.image }}"
  {%- elif cookiecutter.driver == 'proxmox' %}
    proxmox_template_name: "{{ cookiecutter.image }}"
  {%- endif %}
    groups:
    {%- if loop.first %}
      - afs_kdcs
    {%- endif %}
      - afs_databases
{% endfor %}

{%- for i in range(3) %}
  - name: "{{ cookiecutter.instance_name }}-fs{{ i }}"
  {%- if cookiecutter.driver.startswith('vagrant') %}
    box: "{{ cookiecutter.image }}"
  {%- elif cookiecutter.driver == 'proxmox' %}
    proxmox_template_name: "{{ cookiecutter.image }}"
  {%- endif %}
    groups:
      - afs_fileservers
{% endfor %}

{%- endif %}

provisioner:
  name: ansible
  playbooks:
    prepare: "${MOLECULE_SCENARIO_DIRECTORY}/../playbooks/prepare.yml"
    converge: "${MOLECULE_SCENARIO_DIRECTORY}/../playbooks/converge.yml"
    cleanup: "${MOLECULE_SCENARIO_DIRECTORY}/../playbooks/cleanup.yml"
  inventory:
    group_vars:
      all:
        afs_realm: "{{ cookiecutter.realm }}"
        afs_cell: "{{ cookiecutter.cell }}"
        afs_user: "{{ cookiecutter.user }}"
        afs_admin: "{{ cookiecutter.admin }}"
        afs_security_model: "none"

        afs_realm_files: "${MOLECULE_EPHEMERAL_DIRECTORY}"
        afs_cell_files: "${MOLECULE_EPHEMERAL_DIRECTORY}"
        afs_csdb_file: "${MOLECULE_EPHEMERAL_DIRECTORY}/csdb.yaml"

        afs_install_method: "{{ cookiecutter.install_method }}"
{%- if cookiecutter.install_method == 'managed' %}
        # managed options
  {%- if cookiecutter.install_with_dkms == 'yes' %}
        afs_module_install_method: "dkms"
  {%- else %}
        afs_module_install_method: "kmod"
  {%- endif %}
{%- elif cookiecutter.install_method == 'packages' %}
        # packages options
        afs_install_archive: "${MOLECULE_PROJECT_DIRECTORY}/builds/${MOLECULE_SCENARIO_NAME}.tar.gz"
  {%- if cookiecutter.install_with_dkms == 'yes' %}
        afs_module_install_method: "dkms"
  {%- else %}
        afs_module_install_method: "kmod"
  {%- endif %}
{%- elif cookiecutter.install_method == 'bdist' %}
        # bdist options
        afs_install_archive: "${MOLECULE_PROJECT_DIRECTORY}/builds/${MOLECULE_SCENARIO_NAME}.tar.gz"
{%- elif cookiecutter.install_method == 'sdist' %}
        # sdist options
        afs_install_archive: "${MOLECULE_PROJECT_DIRECTORY}/builds/${MOLECULE_SCENARIO_NAME}.tar.gz"
        afs_top_dir: "${AFS_TOPDIR}:-~/openafs.ansible"
        afs_configure_options:
          enable:
            - debug
            - debug-kernel
            - kernel-module
          disable:
            - optimize
            - optimize-kernel
  {%- if cookiecutter.platform != 'solaris114' %}
          with:
            - linux-kernel-packaging
  {%- endif %}
{%- elif cookiecutter.install_method == 'source' %}
        # source options
        afs_top_dir: "${AFS_TOPDIR}:-~/openafs.ansible"
        afs_git_repo: "${AFS_GIT_REPO:-https://github.com/openafs/openafs}"
        afs_git_version: "${AFS_GIT_VERSION:-master}"
        afs_configure_options:
          enable:
            - debug
            - debug-kernel
            - kernel-module
          disable:
            - optimize
            - optimize-kernel
  {%- if cookiecutter.platform != 'solaris114' %}
          with:
            - linux-kernel-packaging
  {%- endif %}
{%- endif %}

{%- if cookiecutter.build_packages and cookiecutter.install_method in ('packages', 'bdist', 'sdist') %}
      afs_builders:
        afs_top_dir: "${AFS_TOPDIR}:-~/openafs.ansible"
        afs_git_repo: "${AFS_GIT_REPO:-https://github.com/openafs/openafs}"
        afs_git_version: "${AFS_GIT_VERSION:-master}"
        afs_configure_options:
          enable:
            - debug
            - debug-kernel
            - kernel-module
          disable:
            - optimize
            - optimize-kernel
  {%- if cookiecutter.platform != 'solaris114' %}
          with:
            - linux-kernel-packaging
  {%- endif %}
{%- endif %}

      afs_test:
{%- if cookiecutter.cluster == 'one instance' %}
        afs_robotest_fileserver_a: "{{ cookiecutter.instance_name }}"
{%- elif cookiecutter.cluster == 'one client instance, one server instance' %}
        afs_robotest_fileserver_a: "{{ cookiecutter.instance_name }}-server"
{%- elif cookiecutter.cluster == 'three client instances, three database instances, three fileserver instances' %}
        afs_robotest_fileserver_a: "{{ cookiecutter.instance_name }}-fs1"
        afs_robotest_fileserver_b: "{{ cookiecutter.instance_name }}-fs2"
{%- endif %}

verifier:
  name: robotframework
  enabled: true
  group: afs_test
  libraries:
    - robotframework-openafslibrary
  tests:
    - name: openafs-robotest
      enabled: true
      type: git
      source: https://github.com/openafs-contrib/openafs-robotest
      version: master
      execute: tests
    - name: extra-tests
      enabled: false
      type: dir
      source: ${MOLECULE_SCENARIO_DIRECTORY}/tests
  variablefiles:
    - source: ${MOLECULE_SCENARIO_DIRECTORY}/../templates/openafs-robotest.yml.j2
  dest_dir: ${MOLECULE_PROJECT_DIRECTORY}/reports/${MOLECULE_SCENARIO_NAME}
  options:
    name: default
    variablefile: openafs-robotest.yml
    loglevel: INFO
    debugfile: debug.log
    runemptysuite: true
    exclude:
      - bug
      - slow
      - rogue-avoidance
      - requires-multi-fs

scenario:
  create_sequence:
    - dependency
    - create
    - prepare
  check_sequence:
    - dependency
    - cleanup
    - destroy
    - create
    - prepare
    - converge
    - check
    - destroy
  converge_sequence:
    - dependency
    - create
    - prepare
    - converge
  destroy_sequence:
    - cleanup
    - destroy
  test_sequence:
    - dependency
    - cleanup
    - destroy
    - create
    - prepare
    - converge
    - verify
    - cleanup
    - destroy
