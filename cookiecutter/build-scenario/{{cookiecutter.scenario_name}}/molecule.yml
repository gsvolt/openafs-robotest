---
dependency:
  name: galaxy

driver:
  name: vagrant

platforms:
  - name: m-builder-01
    box: "${AFS_BOX_01:-generic/centos7}"
    groups:
      - afs_builders
{% if cookiecutter.build_target != 'sdist' %}
  - name: m-builder-02
    box: "${AFS_BOX_01:-generic/centos8}"
    groups:
      - afs_builders

  - name: m-builder-03
    box: "${AFS_BOX_01:-generic/debian10}"
    groups:
      - afs_builders
{% endif %}
provisioner:
  name: ansible
  inventory:
    group_vars:
      all:
{%- if cookiecutter.build_target != 'sdist' %}
        # Preamble
        afs_prep_update_kernel: "${AFS_PREP_UPDATE_KERNEL:-yes}"
{%- endif %}

        # Checkout
        afs_git_repo: "${AFS_GIT_REPO:-git://git.openafs.org/openafs.git}"
        afs_git_version: "${AFS_GIT_VERSION:-master}"
        afs_source: "${AFS_SOURCE:-~/openafs}"

        # Build
{%- if cookiecutter.build_target == 'bdist' %}
        afs_configure_file: "${AFS_CONFIGURE_FILE}"
        afs_bdist_style: "${AFS_BDIST_STYLE:-modern}"
        afs_bdist_name: "${AFS_BDIST_NAME:-bdist}"
        afs_builds: "${AFS_BUILDS:-../../../../builds}"
{%- elif cookiecutter.build_target == 'sdist' %}
        afs_builds: "${AFS_BUILDS:-../../../../builds}"
{%- elif cookiecutter.build_target == 'packages' %}
        afs_builds: "${AFS_BUILDS:-~/.cache/ansible-openafs/builds}"
{%- endif %}

verifier:
  name: ansible

scenario:
  create_sequence:
    - create
    - prepare
  check_sequence:
    - cleanup
    - destroy
    - create
    - prepare
    - converge
    - check
    - destroy
  converge_sequence:
    - create
    - prepare
    - converge
  destroy_sequence:
    - cleanup
    - destroy
  test_sequence:
    - cleanup
    - destroy
    - create
    - prepare
    - converge
    - verify
    - cleanup
    - destroy
